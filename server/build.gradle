plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'maven'
    id 'application'
    id 'com.github.jk1.tcdeps' version '1.2'
    id 'com.jaredsburrows.license' version '0.8.42'
}

version = projectVersion

mainClassName = 'org.javacs.kt.MainKt'
description = 'Code completions, diagnostics and more for Kotlin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def debugPort = 8000
def debugArgs = '-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n,quiet=y'

startScripts {
    applicationName = "kotlin-language-server"
}

repositories {
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url uri("$projectDir/lib") }
    mavenCentral()
    teamcityServer {
        url = teamCityUrl
        credentials {
            username = teamCityUsername
            password = teamCityPassword
        }
    }
}

configurations {
    kotlinJVMLib
}

dependencies {
    def kotlinPluginTC = "$kotlinBuildType:$kotlinBuild:kotlin-plugin-${kotlinPluginBuild}.zip!/Kotlin"

    implementation project(':shared')
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.7.0'
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc:0.7.0'
    implementation 'org.jetbrains.kotlin:kotlin-compiler-embeddable'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains:fernflower:1.0'
    implementation 'com.pinterest.ktlint:ktlint-core:0.34.2'
    implementation 'com.pinterest.ktlint:ktlint-ruleset-standard:0.34.2'
    implementation 'com.beust:jcommander:1.78'

    // Re-add to depend on Kotlin plugin classes directly. Note that
    // this plugin uses the normal imports (com.intellij.*)
    // instead of the embedded ones (org.jetbrains.kotlin.com.intellij.*)
    // as used by kotlin-compiler-embeddable, ktlint, etc.

    // kotlinJVMLib tc("$kotlinPluginTC/lib/kotlin-plugin.jar")

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.11'
    testImplementation 'org.openjdk.jmh:jmh-core:1.20'

    // See https://github.com/JetBrains/kotlin/blob/65b0a5f90328f4b9addd3a10c6f24f3037482276/libraries/examples/scripting/jvm-embeddable-host/build.gradle.kts#L8
    compileOnly 'org.jetbrains.kotlin:kotlin-scripting-jvm-host'
    testCompileOnly 'org.jetbrains.kotlin:kotlin-scripting-jvm-host'

    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
}

configurations.all { config ->
    config.resolutionStrategy {
        preferProjectModules()
    }
}

applicationDistribution.into('bin') {
    fileMode = 0755
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task copyKotlinJVMLib(type: Sync) {
    from configurations.kotlinJVMLib
    into file('lib-kotlin')
}

task copyPropertiesToTestWorkspace(type: Copy) {
    from "$rootDir/gradle.properties"
    into file('src/test/resources/additionalWorkspace')
}

task copyPropertiesToDSLTestWorkspace(type: Copy) {
    from "$rootDir/gradle.properties"
    into file('src/test/resources/kotlinDSLWorkspace')
}

task fixFilePermissions(type: Exec) {
    // When running on macOS or Linux the start script
    // needs executable permissions to run.
    onlyIf { !System.getProperty("os.name").toLowerCase().contains("windows") }
    commandLine 'chmod', '+x', "${installDist.destinationDir}/bin/kotlin-language-server"
}

task debugRun(type: JavaExec) {
    main = mainClassName
    classpath sourceSets.main.runtimeClasspath
    standardInput = System.in

    jvmArgs debugArgs
    doLast {
        println "Using debug port $debugPort"
    }
}

task debugStartScripts(type: CreateStartScripts) {
    applicationName = startScripts.applicationName
    mainClassName = startScripts.mainClassName
    outputDir = installDist.destinationDir.toPath().resolve('bin').toFile()
    classpath = startScripts.classpath
    defaultJvmOpts = [debugArgs]
}

task installDebugDist(type: Sync) {
    dependsOn installDist
    finalizedBy debugStartScripts
}

run {
    standardInput = System.in
}

test {
    dependsOn copyPropertiesToTestWorkspace, copyPropertiesToDSLTestWorkspace

    testLogging {
        events 'failed'
        exceptionFormat 'full'
    }
}

distZip {
    archiveName = "${project.name}.zip"
}

compileKotlin.dependsOn copyKotlinJVMLib
installDist.finalizedBy fixFilePermissions
build.finalizedBy installDist
